local pd <const> = playdate
local gfx <const> = playdate.graphics


local shipgridview = pd.ui.gridview.new(128, 32)


class('ShipInteriorScene').extends(Room)

function ShipInteriorScene:init()
    gfx.sprite.removeAll()
    gfx.setDrawOffset(0, 0)
    returnRoomNumber = 1
    activeArea = "bed"
    ShipInteriorImageScene()

    for i in pairs(items) do
        if items[i]["found"] == true then
            items[i]["name"] = items[i]["name"]
            items[i]["description"] = items[i]["description"]
        elseif items[i]["found"] == false then
            items[i]["name"] = "??????"
            items[i]["description"] = "??????"
        end
    end

    saveMenu = pd.ui.gridview.new(90, 20)
    kitchenMainMenu = pd.ui.gridview.new(90, 20)
    recipeMenu = pd.ui.gridview.new(128, 32)

    showMenu = false
    kitchenMenuShow = false
    recipeMenu = false
end

shiptextbox = gfx.sprite.new()
shiptextbox:setSize(100, 40)
shiptextbox:moveTo(0, 136)
shiptextbox:setCenter(0, 0)
shiptextbox:setZIndex(900)
gfx.setFont(font2)

shiptextbox.text = ""       -- this is blank for now; we can set it at any point
shiptextbox.currentChar = 1 -- we'll use these for the animation
shiptextbox.currentText = ""
shiptextbox.typing = true


-- this function will calculate the string to be used.
-- it won't actually draw it; the following draw() function will.
function shiptextbox:update()
    self.currentChar = self.currentChar + 1
    if self.currentChar > #self.text then
        self.currentChar = #self.text
    end

    if self.typing and self.currentChar <= #self.text then
        shiptextbox.currentText = string.sub(self.text, 1, self.currentChar)
        self:markDirty() -- this tells the sprite that it needs to redraw
    end

    -- end typing
    if self.currentChar == #self.text then
        self.currentChar = 1
        self.typing = false
    end
end

-- this function defines how this sprite is drawn
function shiptextbox:draw()
    -- pushing context means, limit all the drawing config to JUST this block
    -- that way, the colors we set etc. won't be stuck
    gfx.pushContext()
    -- border

    gfx.setColor(gfx.kColorWhite)
    gfx.fillRect(0, 0, 400, 88)

    -- draw the box				

    gfx.setColor(gfx.kColorBlack)
    gfx.fillRect(0, 1, 400, 86)




    -- draw the text!
    gfx.setImageDrawMode(gfx.kDrawModeNXOR)

    gfx.drawTextInRect(self.currentText, 10, 10, 250, 160)


    gfx.popContext()
end

function ShipInteriorScene:update()
    shiptextbox.currentText = shipcopy
    if activeArea == "cockpit" then
        if pd.buttonJustPressed(pd.kButtonA) then
            if pd.isCrankDocked() == false then
                hudShow = false
                paused  = true
                gfx.sprite.removeAll()
                gfx.setDrawOffset(0, 0)

                ShipTakeoff()
                levelTimer = pd.timer.performAfterDelay(3000, function()
                    levelNum = 0

                    manager:enter(LoadingScene())
                end)
            end
        end
    end
    if activeArea == "kitchen" then
        kitchenoptions = { "Snacks", "Main Course", "Desserts" }

        if recipeMenu == false then
            kitchenMainMenu:drawInRect(280, 130, 102, 77)
            kitchenMainMenu:setNumberOfRows(#kitchenoptions)
        elseif recipeMenu == true then
            kitchenMainMenu:drawInRect(20, 20, 102, 200)
            kitchenMainMenu:setNumberOfRows(#items)
        end
        kitchenMainMenu:setCellPadding(2, 2, 2, 2)

        kitchenMainMenu.backgroundImage = gfx.nineSlice.new("assets/images/textBackground", 6, 6, 18, 18)
        kitchenMainMenu:setContentInset(2, 2, 2, 2)


        function kitchenMainMenu:drawCell(section, row, column, selected, x, y, width, height)
            if selected then
                gfx.setColor(gfx.kColorBlack)

                gfx.fillRoundRect(x, y, width, height, 2)
                gfx.setImageDrawMode(gfx.kDrawModeFillBlack)
                gfx.setImageDrawMode(gfx.kDrawModeNXOR)
            else
                gfx.setImageDrawMode(gfx.kDrawModeNXOR)
            end


            local fontHeight = gfx.getSystemFont():getHeight()
            if recipeMenu == false then
                kitchenlist = gfx.drawTextInRect(kitchenoptions[row], x, y + (height / 2 - fontHeight / 2) + 3, width,
                    height, nil, nil,
                    kTextAlignment.center)
            elseif recipeMenu == true then
                kitchenlist = gfx.drawTextInRect(items[row]["name"], x, y + (height / 2 - fontHeight / 2) + 3, width,
                    height, nil, nil,
                    kTextAlignment.center)
            end
        end

        if pd.buttonJustPressed(pd.kButtonUp) then
            kitchenMainMenu:selectPreviousRow(true)
        elseif pd.buttonJustPressed(pd.kButtonDown) then
            kitchenMainMenu:selectNextRow(true)
        end


        if pd.buttonJustPressed(pd.kButtonB) and recipeMenu == true then
            recipeMenu = false
        end

        if kitchenMainMenu:getSelectedRow() == 1 then
            if pd.buttonJustPressed(pd.kButtonA) then
                recipeMenu = true
            end
        elseif kitchenMainMenu:getSelectedRow() == 2 then
            if pd.buttonJustPressed(pd.kButtonA) then
                saveData = true
                shiptextbox:setSize(100, 40)
                shiptextbox:moveTo(300, 136)
                shiptextbox:add()

                saveGameData()
                shipcopy = "Game Saved."

                shiptextclose = pd.timer.performAfterDelay(2000, function()
                    shiptextbox:remove()
                end)
            end
        end



        local crankTicks = pd.getCrankTicks(2)
        if crankTicks == 1 then
            kitchenMainMenu:selectNextColumn(true)
        elseif crankTicks == -1 then
            kitchenMainMenu:selectPreviousColumn(true)
        end
    end



    if activeArea == "bed" then
        if showMenu == true then
            saveoptions = { "Save" }
            saveMenu:drawInRect(280, 190, 102, 30)

            saveMenu:setNumberOfRows(#saveoptions)
            saveMenu:setCellPadding(2, 2, 2, 2)

            saveMenu.backgroundImage = gfx.nineSlice.new("assets/images/textBackground", 6, 6, 18, 18)
            saveMenu:setContentInset(2, 2, 2, 2)


            function saveMenu:drawCell(section, row, column, selected, x, y, width, height)
                if selected then
                    gfx.setColor(gfx.kColorBlack)

                    gfx.fillRoundRect(x, y, width, height, 2)
                    gfx.setImageDrawMode(gfx.kDrawModeFillBlack)
                    gfx.setImageDrawMode(gfx.kDrawModeNXOR)
                else
                    gfx.setImageDrawMode(gfx.kDrawModeNXOR)
                end


                local fontHeight = gfx.getSystemFont():getHeight()
                gfx.drawTextInRect(saveoptions[row], x, y + (height / 2 - fontHeight / 2) + 3, width, height, nil, nil,
                    kTextAlignment.center)
            end

            if pd.buttonJustPressed(pd.kButtonUp) then
                saveMenu:selectPreviousRow(true)
            elseif pd.buttonJustPressed(pd.kButtonDown) then
                saveMenu:selectNextRow(true)
            end




            if saveMenu:getSelectedRow() == 1 then
                if pd.buttonJustPressed(pd.kButtonA) and showMenu == true then
                    saveData = true
                    shiptextbox:setSize(100, 40)
                    shiptextbox:moveTo(300, 136)
                    shiptextbox:add()

                    saveGameData()
                    shipcopy = "Game Saved."

                    shiptextclose = pd.timer.performAfterDelay(2000, function()
                        shiptextbox:remove()
                    end)
                end
            end



            local crankTicks = pd.getCrankTicks(2)
            if crankTicks == 1 then
                saveMenu:selectNextColumn(true)
            elseif crankTicks == -1 then
                saveMenu:selectPreviousColumn(true)
            end
        end
    end
    if pd.buttonJustPressed(pd.kButtonA) and showMenu == false then
        showMenu = true
    end
    if pd.buttonJustPressed(pd.kButtonB) and showMenu == false then
        manager:enter(levelScene)
    end
    if pd.buttonJustPressed(pd.kButtonB) and showMenu == true then
        showMenu = false
    end
end

class('ShipInteriorImageScene').extends(AnimatedSprite)
function ShipInteriorImageScene:init()
    shipintImageTable = gfx.imagetable.new("assets/images/shipinterior-table-400-240")

    Ship.super.init(self, shipintImageTable)
    self:addState("bed", 1, 4, { tickStep = math.random(8, 12) })
    self:addState("kitchen", 5, 8, { tickStep = 4 })
    self:addState("cockpit", 9, 12, { tickStep = 4 })
    self:playAnimation()
    self:setTag(TAGS.Ship)
    self.x = 0
    self.y = 0
    self.speed = 400
    self:moveTo(self.x, self.y)

    self:setCenter(0, 0)
    self:add()
    self:setZIndex(0)
    currentArea = 0
end

function ShipInteriorImageScene:update()
    self:updateAnimation()
    if pd.buttonJustPressed(pd.kButtonRight) then
        currentArea += 1
        showMenu = false
    elseif pd.buttonJustPressed(pd.kButtonLeft) then
        currentArea -= 1
        showMenu = false
    end

    if currentArea > 2 then
        currentArea = 2
    elseif currentArea < 0 then
        currentArea = 0
    end

    if currentArea == 0 then
        self.currentState = "bed"
        activeArea = "bed"
    elseif currentArea == 1 then
        self.currentState = "kitchen"
        activeArea = "kitchen"
    elseif currentArea == 2 then
        self.currentState = "cockpit"
        activeArea = "cockpit"
    end
end

class('ShipTakeoff').extends(AnimatedSprite)

function ShipTakeoff:init(x, y)
    local shipImageTable = gfx.imagetable.new("assets/images/shiptakeoff-table-400-240")
    Ship.super.init(self, shipImageTable)
    self:addState("idle", 1, 15, { tickStep = 12 })
    self.currentState = "idle"


    self:setZIndex(1000)

    self:moveTo(0, 0)

    self:setCenter(0, 0)
    self:add()
    self:playAnimation()
    self:setTag(TAGS.Ship)
end

function ShipTakeoff:update()
    self:updateAnimation()
    shipTimer = pd.timer.performAfterDelay(3000, function()
        self:remove()
    end)
end
